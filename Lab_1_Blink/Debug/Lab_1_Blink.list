
Lab_1_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003468  08003468  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08003470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000034  080034a4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080034a4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c82b  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0a  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f51  00000000  00000000  0002f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c70d  00000000  00000000  000577bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe188  00000000  00000000  00063ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a64  00000000  00000000  00162054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00164ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000034 	.word	0x20000034
 8000210:	00000000 	.word	0x00000000
 8000214:	080033ac 	.word	0x080033ac

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000038 	.word	0x20000038
 8000230:	080033ac 	.word	0x080033ac

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <Debounce.0>:
  /* USER CODE BEGIN 2 */
  // User Private Functions

  // De-bounce Function
  bool Debounce(int times)
  {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	f8c7 c000 	str.w	ip, [r7]
	  // Local Variables
	  int check = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
	  uint32_t current_time = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
	  uint32_t next_check = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]

	  // Main Function
	  for (int i = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	e01a      	b.n	80005a8 <Debounce.0+0x54>
	  			i < times;
	  			i++)							// Run for the amount of times to wait
	  {
		  check = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);			// Poll the button
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <Debounce.0+0x68>)
 8000578:	f001 f8a0 	bl	80016bc <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	60fb      	str	r3, [r7, #12]
		  next_check = HAL_GetTick() + 20;						// Set timer for 20ms
 8000580:	f000 fd78 	bl	8001074 <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
 8000586:	3314      	adds	r3, #20
 8000588:	60bb      	str	r3, [r7, #8]

		  if (!check)											// Check if the button is off
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <Debounce.0+0x46>
		  {
			  return false;
 8000590:	2300      	movs	r3, #0
 8000592:	e00e      	b.n	80005b2 <Debounce.0+0x5e>
		  }
		  while (current_time < next_check)						// Wait for next check
		  {
			  current_time = HAL_GetTick();						// Update time check
 8000594:	f000 fd6e 	bl	8001074 <HAL_GetTick>
 8000598:	6178      	str	r0, [r7, #20]
		  while (current_time < next_check)						// Wait for next check
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d3f8      	bcc.n	8000594 <Debounce.0+0x40>
	  			i++)							// Run for the amount of times to wait
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	3301      	adds	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
	  			i < times;
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbe0      	blt.n	8000572 <Debounce.0+0x1e>
		  }
	  }

	  // Tell the user this is a validated press
	  return true;
 80005b0:	2301      	movs	r3, #1

  }
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	42020800 	.word	0x42020800

080005c0 <main>:
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
int main(void)
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80005cc:	f000 fce8 	bl	8000fa0 <HAL_Init>
  SystemClock_Config();
 80005d0:	f000 f83c 	bl	800064c <SystemClock_Config>
  MX_GPIO_Init();
 80005d4:	f000 f89e 	bl	8000714 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005d8:	f000 f889 	bl	80006ee <MX_ICACHE_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fa37 	bl	8000a50 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fa34 	bl	8000a50 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 fa31 	bl	8000a50 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005ee:	2101      	movs	r1, #1
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fa8b 	bl	8000b0c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0x84>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <main+0x84>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0x84>)
 8000606:	2200      	movs	r2, #0
 8000608:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <main+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <main+0x84>)
 8000612:	2200      	movs	r2, #0
 8000614:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000616:	490b      	ldr	r1, [pc, #44]	; (8000644 <main+0x84>)
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fb33 	bl	8000c84 <BSP_COM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <main+0x68>
  {
    Error_Handler();
 8000624:	f000 f8ce 	bl	80007c4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (Debounce(4))		// Check for user input on C13
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	469c      	mov	ip, r3
 800062c:	2004      	movs	r0, #4
 800062e:	f7ff ff91 	bl	8000554 <Debounce.0>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f7      	beq.n	8000628 <main+0x68>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x88>)
 800063c:	f001 f86e 	bl	800171c <HAL_GPIO_TogglePin>
	  if (Debounce(4))		// Check for user input on C13
 8000640:	e7f2      	b.n	8000628 <main+0x68>
 8000642:	bf00      	nop
 8000644:	20000050 	.word	0x20000050
 8000648:	42020800 	.word	0x42020800

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b098      	sub	sp, #96	; 0x60
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2248      	movs	r2, #72	; 0x48
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe79 	bl	8003352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f001 f8ac 	bl	80017cc <HAL_PWREx_ControlVoltageScaling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800067a:	f000 f8a3 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800067e:	2310      	movs	r3, #16
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000686:	2300      	movs	r3, #0
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068a:	2360      	movs	r3, #96	; 0x60
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000692:	2301      	movs	r3, #1
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800069a:	2337      	movs	r3, #55	; 0x37
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069e:	2307      	movs	r3, #7
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f91c 	bl	80018ec <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ba:	f000 f883 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fdde 	bl	8002298 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e2:	f000 f86f 	bl	80007c4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3760      	adds	r7, #96	; 0x60
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 f82c 	bl	8001750 <HAL_ICACHE_ConfigAssociativityMode>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006fe:	f000 f861 	bl	80007c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000702:	f001 f845 	bl	8001790 <HAL_ICACHE_Enable>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800070c:	f000 f85a 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_GPIO_Init+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_GPIO_Init+0xa8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_GPIO_Init+0xa8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0xac>)
 8000778:	f000 ffb8 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <MX_GPIO_Init+0xac>)
 8000792:	f000 fe13 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0xac>)
 80007ae:	f000 fe05 	bl	80013bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	42020800 	.word	0x42020800

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 fbf2 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f9f1 	bl	8000c58 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80008a6:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80008b2:	4b4c      	ldr	r3, [pc, #304]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 80008b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e005      	b.n	80008ce <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80008c2:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	091b      	lsrs	r3, r3, #4
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80008ce:	4a46      	ldr	r2, [pc, #280]	; (80009e8 <SystemCoreClockUpdate+0x148>)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f003 030c 	and.w	r3, r3, #12
 80008e0:	2b0c      	cmp	r3, #12
 80008e2:	d866      	bhi.n	80009b2 <SystemCoreClockUpdate+0x112>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <SystemCoreClockUpdate+0x4c>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	08000921 	.word	0x08000921
 80008f0:	080009b3 	.word	0x080009b3
 80008f4:	080009b3 	.word	0x080009b3
 80008f8:	080009b3 	.word	0x080009b3
 80008fc:	08000929 	.word	0x08000929
 8000900:	080009b3 	.word	0x080009b3
 8000904:	080009b3 	.word	0x080009b3
 8000908:	080009b3 	.word	0x080009b3
 800090c:	08000931 	.word	0x08000931
 8000910:	080009b3 	.word	0x080009b3
 8000914:	080009b3 	.word	0x080009b3
 8000918:	080009b3 	.word	0x080009b3
 800091c:	08000939 	.word	0x08000939
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000920:	4a32      	ldr	r2, [pc, #200]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	6013      	str	r3, [r2, #0]
      break;
 8000926:	e048      	b.n	80009ba <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 800092a:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <SystemCoreClockUpdate+0x150>)
 800092c:	601a      	str	r2, [r3, #0]
      break;
 800092e:	e044      	b.n	80009ba <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 8000932:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <SystemCoreClockUpdate+0x154>)
 8000934:	601a      	str	r2, [r3, #0]
      break;
 8000936:	e040      	b.n	80009ba <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000938:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	3301      	adds	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d003      	beq.n	800095e <SystemCoreClockUpdate+0xbe>
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d006      	beq.n	800096a <SystemCoreClockUpdate+0xca>
 800095c:	e00b      	b.n	8000976 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <SystemCoreClockUpdate+0x150>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	613b      	str	r3, [r7, #16]
          break;
 8000968:	e00b      	b.n	8000982 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <SystemCoreClockUpdate+0x154>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	613b      	str	r3, [r7, #16]
          break;
 8000974:	e005      	b.n	8000982 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	613b      	str	r3, [r7, #16]
          break;
 8000980:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0e5b      	lsrs	r3, r3, #25
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	3301      	adds	r3, #1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 80009ae:	6013      	str	r3, [r2, #0]
      break;
 80009b0:	e003      	b.n	80009ba <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	6013      	str	r3, [r2, #0]
      break;
 80009b8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <SystemCoreClockUpdate+0x144>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <SystemCoreClockUpdate+0x158>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemCoreClockUpdate+0x14c>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08003408 	.word	0x08003408
 80009ec:	20000000 	.word	0x20000000
 80009f0:	00f42400 	.word	0x00f42400
 80009f4:	007a1200 	.word	0x007a1200
 80009f8:	080033f0 	.word	0x080033f0

080009fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a00:	f7ff ff3c 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
	ldr	r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LoopForever+0x16>)
	cmp	r2, r3
 8000a26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2a:	f002 fc9b 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2e:	f7ff fdc7 	bl	80005c0 <main>

08000a32 <LoopForever>:

LoopForever:
    b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a34:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000a38:	08003470 	.word	0x08003470
	ldr	r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a40:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8000a44:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8000a48:	20000198 	.word	0x20000198

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10c      	bne.n	8000a7a <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	e01b      	b.n	8000ab2 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10c      	bne.n	8000a9a <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	e00b      	b.n	8000ab2 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <BSP_LED_Init+0xb0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <BSP_LED_Init+0xb4>)
 8000ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <BSP_LED_Init+0xb8>)
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	f107 0214 	add.w	r2, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fc70 	bl	80013bc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <BSP_LED_Init+0xb8>)
 8000ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <BSP_LED_Init+0xb4>)
 8000ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	f000 fdfc 	bl	80016ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	20000004 	.word	0x20000004
 8000b08:	2000000c 	.word	0x2000000c

08000b0c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000b20:	230f      	movs	r3, #15
 8000b22:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <BSP_PB_Init+0x118>)
 8000b26:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000b28:	4b3f      	ldr	r3, [pc, #252]	; (8000c28 <BSP_PB_Init+0x11c>)
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <BSP_PB_Init+0x120>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <BSP_PB_Init+0x120>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b38:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <BSP_PB_Init+0x120>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <BSP_PB_Init+0x124>)
 8000b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2302      	movs	r3, #2
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10b      	bne.n	8000b74 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <BSP_PB_Init+0x128>)
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	f107 0218 	add.w	r2, r7, #24
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fc24 	bl	80013bc <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d14f      	bne.n	8000c1a <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <BSP_PB_Init+0x128>)
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	f107 0218 	add.w	r2, r7, #24
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fc14 	bl	80013bc <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <BSP_PB_Init+0x12c>)
 8000ba0:	441a      	add	r2, r3
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	3330      	adds	r3, #48	; 0x30
 8000ba8:	443b      	add	r3, r7
 8000baa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	f000 fba6 	bl	8001302 <HAL_EXTI_GetHandle>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12b      	bne.n	8000c14 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <BSP_PB_Init+0x12c>)
 8000bc8:	1898      	adds	r0, r3, r2
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	3330      	adds	r3, #48	; 0x30
 8000bd0:	443b      	add	r3, r7
 8000bd2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2101      	movs	r1, #1
 8000bda:	f000 fb66 	bl	80012aa <HAL_EXTI_RegisterCallback>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d113      	bne.n	8000c0c <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <BSP_PB_Init+0x130>)
 8000be8:	56d0      	ldrsb	r0, [r2, r3]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	3330      	adds	r3, #48	; 0x30
 8000bf0:	443b      	add	r3, r7
 8000bf2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f000 fb22 	bl	8001242 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <BSP_PB_Init+0x130>)
 8000c02:	56d3      	ldrsb	r3, [r2, r3]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb36 	bl	8001276 <HAL_NVIC_EnableIRQ>
 8000c0a:	e006      	b.n	8000c1a <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000c0c:	f06f 0303 	mvn.w	r3, #3
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c12:	e002      	b.n	8000c1a <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000c14:	f06f 0303 	mvn.w	r3, #3
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  return status;
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3730      	adds	r7, #48	; 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	0600000d 	.word	0x0600000d
 8000c28:	08000df1 	.word	0x08000df1
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	20000018 	.word	0x20000018
 8000c34:	2000001c 	.word	0x2000001c
 8000c38:	20000188 	.word	0x20000188
 8000c3c:	20000020 	.word	0x20000020

08000c40 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <BSP_PB_IRQHandler+0x28>)
 8000c6e:	4413      	add	r3, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb5b 	bl	800132c <HAL_EXTI_IRQHandler>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000188 	.word	0x20000188

08000c84 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000c9a:	f06f 0301 	mvn.w	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e03a      	b.n	8000d18 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	491f      	ldr	r1, [pc, #124]	; (8000d24 <BSP_COM_Init+0xa0>)
 8000ca8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cac:	491e      	ldr	r1, [pc, #120]	; (8000d28 <BSP_COM_Init+0xa4>)
 8000cae:	2094      	movs	r0, #148	; 0x94
 8000cb0:	fb00 f303 	mul.w	r3, r0, r3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2294      	movs	r2, #148	; 0x94
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <BSP_COM_Init+0xa4>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f89b 	bl	8000e00 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d123      	bne.n	8000d18 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d110      	bne.n	8000cf8 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2294      	movs	r2, #148	; 0x94
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <BSP_COM_Init+0xa4>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	6839      	ldr	r1, [r7, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f821 	bl	8000d2c <MX_LPUART1_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000cf0:	f06f 0303 	mvn.w	r3, #3
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e00f      	b.n	8000d18 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2294      	movs	r2, #148	; 0x94
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <BSP_COM_Init+0xa4>)
 8000d02:	4413      	add	r3, r2
 8000d04:	6839      	ldr	r1, [r7, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f841 	bl	8000d8e <MX_USART3_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000d12:	f06f 0303 	mvn.w	r3, #3
 8000d16:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000024 	.word	0x20000024
 8000d28:	20000060 	.word	0x20000060

08000d2c <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	891b      	ldrh	r3, [r3, #8]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	895b      	ldrh	r3, [r3, #10]
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	220c      	movs	r2, #12
 8000d5e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	899b      	ldrh	r3, [r3, #12]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d70:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_UART_Init(huart);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f001 fd6e 	bl	8002860 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	895b      	ldrh	r3, [r3, #10]
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	899b      	ldrh	r3, [r3, #12]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_UART_Init(huart);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f001 fd3d 	bl	8002860 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff ff23 	bl	8000c40 <BSP_PB_Callback>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b098      	sub	sp, #96	; 0x60
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8000e08:	4a60      	ldr	r2, [pc, #384]	; (8000f8c <UART_MspInit+0x18c>)
 8000e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e12:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8000e16:	4a5d      	ldr	r2, [pc, #372]	; (8000f8c <UART_MspInit+0x18c>)
 8000e18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e20:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8000e24:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <UART_MspInit+0x190>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <UART_MspInit+0x194>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8000e30:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000e34:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8000e36:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000e3a:	853b      	strh	r3, [r7, #40]	; 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a55      	ldr	r2, [pc, #340]	; (8000f98 <UART_MspInit+0x198>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8000e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d132      	bne.n	8000ebe <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <UART_MspInit+0x19c>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <UART_MspInit+0x19c>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <UART_MspInit+0x19c>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8000e70:	f000 fd08 	bl	8001884 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8000e74:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <UART_MspInit+0x19c>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <UART_MspInit+0x19c>)
 8000e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <UART_MspInit+0x19c>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e88:	623b      	str	r3, [r7, #32]
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <UART_MspInit+0x19c>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a42      	ldr	r2, [pc, #264]	; (8000f9c <UART_MspInit+0x19c>)
 8000e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <UART_MspInit+0x19c>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <UART_MspInit+0x19c>)
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <UART_MspInit+0x19c>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <UART_MspInit+0x19c>)
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	e023      	b.n	8000f06 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8000ebe:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <UART_MspInit+0x19c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <UART_MspInit+0x19c>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <UART_MspInit+0x19c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <UART_MspInit+0x19c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <UART_MspInit+0x19c>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <UART_MspInit+0x19c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <UART_MspInit+0x19c>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <UART_MspInit+0x19c>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <UART_MspInit+0x19c>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8000f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3360      	adds	r3, #96	; 0x60
 8000f0e:	443b      	add	r3, r7
 8000f10:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8000f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f26:	3360      	adds	r3, #96	; 0x60
 8000f28:	443b      	add	r3, r7
 8000f2a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000f2e:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8000f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	3360      	adds	r3, #96	; 0x60
 8000f38:	443b      	add	r3, r7
 8000f3a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000f3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fa39 	bl	80013bc <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 8000f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	3360      	adds	r3, #96	; 0x60
 8000f52:	443b      	add	r3, r7
 8000f54:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 8000f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f5e:	3360      	adds	r3, #96	; 0x60
 8000f60:	443b      	add	r3, r7
 8000f62:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000f66:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8000f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3360      	adds	r3, #96	; 0x60
 8000f70:	443b      	add	r3, r7
 8000f72:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fa1d 	bl	80013bc <HAL_GPIO_Init>
}
 8000f82:	bf00      	nop
 8000f84:	3760      	adds	r7, #96	; 0x60
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	080033e0 	.word	0x080033e0
 8000f90:	080033e8 	.word	0x080033e8
 8000f94:	080033ec 	.word	0x080033ec
 8000f98:	40008000 	.word	0x40008000
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000faa:	2004      	movs	r0, #4
 8000fac:	f000 f93e 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000fb0:	f7ff fc76 	bl	80008a0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f80d 	bl	8000fd4 <HAL_InitTick>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e001      	b.n	8000fca <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc6:	f7ff fc03 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d023      	beq.n	8001030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_InitTick+0x70>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f947 	bl	8001292 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10f      	bne.n	800102a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b07      	cmp	r3, #7
 800100e:	d809      	bhi.n	8001024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001018:	f000 f913 	bl	8001242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_InitTick+0x74>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e007      	b.n	8001034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e004      	b.n	8001034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e001      	b.n	8001034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000030 	.word	0x20000030
 8001044:	20000000 	.word	0x20000000
 8001048:	2000002c 	.word	0x2000002c

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000030 	.word	0x20000030
 8001070:	20000194 	.word	0x20000194

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000194 	.word	0x20000194

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0152      	lsls	r2, r2, #5
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0152      	lsls	r2, r2, #5
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b03      	cmp	r3, #3
 800119c:	bf28      	it	cs
 800119e:	2303      	movcs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3303      	adds	r3, #3
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b04      	subs	r3, #4
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	2107      	movs	r1, #7
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff40 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff33 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa4 	bl	80011e8 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80012aa:	b480      	push	{r7}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	460b      	mov	r3, r1
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d011      	beq.n	80012e6 <HAL_EXTI_RegisterCallback+0x3c>
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	dc13      	bgt.n	80012ee <HAL_EXTI_RegisterCallback+0x44>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_EXTI_RegisterCallback+0x26>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d007      	beq.n	80012de <HAL_EXTI_RegisterCallback+0x34>
 80012ce:	e00e      	b.n	80012ee <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
      break;
 80012dc:	e00a      	b.n	80012f4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
      break;
 80012e4:	e006      	b.n	80012f4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
      break;
 80012ec:	e002      	b.n	80012f4 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
      break;
 80012f2:	bf00      	nop
  }

  return status;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e003      	b.n	800131e <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_EXTI_IRQHandler+0x88>)
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_EXTI_IRQHandler+0x8c>)
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4798      	blx	r3
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	4002f40c 	.word	0x4002f40c
 80013b8:	4002f410 	.word	0x4002f410

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ca:	e158      	b.n	800167e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 814a 	beq.w	8001678 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d005      	beq.n	80013fc <HAL_GPIO_Init+0x40>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d130      	bne.n	800145e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 0201 	and.w	r2, r3, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b03      	cmp	r3, #3
 8001468:	d017      	beq.n	800149a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d123      	bne.n	80014ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	220f      	movs	r2, #15
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0203 	and.w	r2, r3, #3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80a4 	beq.w	8001678 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001530:	4a5a      	ldr	r2, [pc, #360]	; (800169c <HAL_GPIO_Init+0x2e0>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3318      	adds	r3, #24
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d025      	beq.n	80015a8 <HAL_GPIO_Init+0x1ec>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d01f      	beq.n	80015a4 <HAL_GPIO_Init+0x1e8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d019      	beq.n	80015a0 <HAL_GPIO_Init+0x1e4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d013      	beq.n	800159c <HAL_GPIO_Init+0x1e0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_GPIO_Init+0x1dc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x1d8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x2fc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_GPIO_Init+0x1d4>
 800158c:	2306      	movs	r3, #6
 800158e:	e00c      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 8001590:	2307      	movs	r3, #7
 8001592:	e00a      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 8001594:	2305      	movs	r3, #5
 8001596:	e008      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 8001598:	2304      	movs	r3, #4
 800159a:	e006      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 800159c:	2303      	movs	r3, #3
 800159e:	e004      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a8:	2300      	movs	r3, #0
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	4093      	lsls	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80015ba:	4938      	ldr	r1, [pc, #224]	; (800169c <HAL_GPIO_Init+0x2e0>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3318      	adds	r3, #24
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_GPIO_Init+0x2e0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_GPIO_Init+0x2e0>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_GPIO_Init+0x2e0>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001616:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_GPIO_Init+0x2e0>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_GPIO_Init+0x2e0>)
 800161e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_GPIO_Init+0x2e0>)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_GPIO_Init+0x2e0>)
 800164c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_GPIO_Init+0x2e0>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	f47f ae9f 	bne.w	80013cc <HAL_GPIO_Init+0x10>
  }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	4002f400 	.word	0x4002f400
 80016a0:	42020000 	.word	0x42020000
 80016a4:	42020400 	.word	0x42020400
 80016a8:	42020800 	.word	0x42020800
 80016ac:	42020c00 	.word	0x42020c00
 80016b0:	42021000 	.word	0x42021000
 80016b4:	42021400 	.word	0x42021400
 80016b8:	42021800 	.word	0x42021800

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43d9      	mvns	r1, r3
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	400b      	ands	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e007      	b.n	800177e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 0204 	bic.w	r2, r3, #4
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40030400 	.word	0x40030400

08001790 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_ICACHE_Enable+0x1c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_ICACHE_Enable+0x1c>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40030400 	.word	0x40030400

080017b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017dc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80017de:	f000 f861 	bl	80018a4 <HAL_PWREx_SMPS_GetEffectiveMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017e8:	d101      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e03e      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fa:	d101      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e035      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	d101      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e02f      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001814:	4917      	ldr	r1, [pc, #92]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	09db      	lsrs	r3, r3, #7
 800182a:	2232      	movs	r2, #50	; 0x32
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183c:	e002      	b.n	8001844 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3b01      	subs	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001850:	d102      	bne.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f2      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	d101      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e000      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40007000 	.word	0x40007000
 8001878:	20000000 	.word	0x20000000
 800187c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001880:	cccccccd 	.word	0xcccccccd

08001884 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	6053      	str	r3, [r2, #4]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	e00a      	b.n	80018d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	e001      	b.n	80018d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000

080018ec <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f000 bcc2 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001900:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800190a:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80e9 	beq.w	8001af4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_RCC_OscConfig+0x4a>
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	f040 8083 	bne.w	8001a36 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d17f      	bne.n	8001a36 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001936:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_RCC_OscConfig+0x64>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 bc9a 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001954:	4b84      	ldr	r3, [pc, #528]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_RCC_OscConfig+0x7e>
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001968:	e005      	b.n	8001976 <HAL_RCC_OscConfig+0x8a>
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001976:	4293      	cmp	r3, r2
 8001978:	d224      	bcs.n	80019c4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fe9c 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f000 bc7a 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001990:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a74      	ldr	r2, [pc, #464]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	496f      	ldr	r1, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	4b6e      	ldr	r3, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	496a      	ldr	r1, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
 80019c2:	e026      	b.n	8001a12 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a67      	ldr	r2, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	4962      	ldr	r1, [pc, #392]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e2:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	495d      	ldr	r1, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fe5b 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f000 bc39 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a12:	f000 fe17 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <HAL_RCC_OscConfig+0x280>)
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a1c:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_RCC_OscConfig+0x284>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fad7 	bl	8000fd4 <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d060      	beq.n	8001af2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	f000 bc27 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d039      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fb13 	bl	8001074 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a50:	e00f      	b.n	8001a72 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a52:	f7ff fb0f 	bl	8001074 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d908      	bls.n	8001a72 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f000 bc09 	b.w	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0e9      	beq.n	8001a52 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	492f      	ldr	r1, [pc, #188]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e020      	b.n	8001af4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fad9 	bl	8001074 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fad5 	bl	8001074 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e3cf      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1da>
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d07e      	beq.n	8001bfe <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x226>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06e      	beq.n	8001bfc <HAL_RCC_OscConfig+0x310>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d16a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e3ac      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x256>
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e024      	b.n	8001b8c <HAL_RCC_OscConfig+0x2a0>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4a:	d113      	bne.n	8001b74 <HAL_RCC_OscConfig+0x288>
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a02      	ldr	r2, [pc, #8]	; (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e012      	b.n	8001b8c <HAL_RCC_OscConfig+0x2a0>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a8a      	ldr	r2, [pc, #552]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a87      	ldr	r2, [pc, #540]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d019      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa6e 	bl	8001074 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	e00e      	b.n	8001bba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fa6a 	bl	8001074 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d907      	bls.n	8001bba <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001baa:	4b7e      	ldr	r3, [pc, #504]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e364      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ea      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2b0>
 8001bc6:	e01a      	b.n	8001bfe <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fa54 	bl	8001074 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	e00e      	b.n	8001bee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fa50 	bl	8001074 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d907      	bls.n	8001bee <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e34a      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	4b6d      	ldr	r3, [pc, #436]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ea      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2e4>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x330>
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d119      	bne.n	8001c4a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d116      	bne.n	8001c4a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x348>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e327      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	4958      	ldr	r1, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c48:	e04c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d029      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c52:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa09 	bl	8001074 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fa05 	bl	8001074 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e2ff      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ea      	beq.n	8001c66 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4941      	ldr	r1, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e01e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f9df 	bl	8001074 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb8:	e00e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff f9db 	bl	8001074 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d907      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e2d5      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ea      	bne.n	8001cba <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d062      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d038      	beq.n	8001d6a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f023 0310 	bic.w	r3, r3, #16
 8001d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d10:	e007      	b.n	8001d22 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f99f 	bl	8001074 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d38:	e00f      	b.n	8001d5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f99b 	bl	8001074 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d908      	bls.n	8001d5a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e294      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0e8      	beq.n	8001d3a <HAL_RCC_OscConfig+0x44e>
 8001d68:	e025      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f97b 	bl	8001074 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	e012      	b.n	8001da8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff f977 	bl	8001074 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b07      	cmp	r3, #7
 8001d8e:	d90b      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e270      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	4ba8      	ldr	r3, [pc, #672]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e5      	bne.n	8001d82 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 812d 	beq.w	800201e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc8:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a9c      	ldr	r2, [pc, #624]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b9a      	ldr	r3, [pc, #616]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	4b97      	ldr	r3, [pc, #604]	; (8002050 <HAL_RCC_OscConfig+0x764>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11e      	bne.n	8001e3a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b94      	ldr	r3, [pc, #592]	; (8002050 <HAL_RCC_OscConfig+0x764>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a93      	ldr	r2, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x764>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e08:	f7ff f934 	bl	8001074 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	e00e      	b.n	8001e2e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7ff f930 	bl	8001074 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d907      	bls.n	8001e2e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x764>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e22a      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x764>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ea      	beq.n	8001e10 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01f      	beq.n	8001e86 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d010      	beq.n	8001e74 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e52:	4b7e      	ldr	r3, [pc, #504]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e68:	4a78      	ldr	r2, [pc, #480]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e72:	e018      	b.n	8001ea6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e74:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a74      	ldr	r2, [pc, #464]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e84:	e00f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e86:	4b71      	ldr	r3, [pc, #452]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	4a6f      	ldr	r2, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e96:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d068      	beq.n	8001f80 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff f8e1 	bl	8001074 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	e011      	b.n	8001eda <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff f8dd 	bl	8001074 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d908      	bls.n	8001eda <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec8:	4b60      	ldr	r3, [pc, #384]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1d4      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0e6      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d022      	beq.n	8001f3a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f8b5 	bl	8001074 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d908      	bls.n	8001f2a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1ac      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f2a:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0e6      	beq.n	8001f06 <HAL_RCC_OscConfig+0x61a>
 8001f38:	e068      	b.n	800200c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f4a:	e011      	b.n	8001f70 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f892 	bl	8001074 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e189      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f70:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1e6      	bne.n	8001f4c <HAL_RCC_OscConfig+0x660>
 8001f7e:	e045      	b.n	800200c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f878 	bl	8001074 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f86:	e011      	b.n	8001fac <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7ff f874 	bl	8001074 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d908      	bls.n	8001fac <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e16b      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e6      	bne.n	8001f88 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d021      	beq.n	800200c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fd8:	e011      	b.n	8001ffe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7ff f84b 	bl	8001074 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d908      	bls.n	8001ffe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e142      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e6      	bne.n	8001fda <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800200c:	7ffb      	ldrb	r3, [r7, #31]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d04f      	beq.n	80020ca <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d028      	beq.n	8002084 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_OscConfig+0x760>)
 8002034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x760>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff f817 	bl	8001074 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x788>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002054:	f7ff f80e 	bl	8001074 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002062:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e107      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002074:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0e8      	beq.n	8002054 <HAL_RCC_OscConfig+0x768>
 8002082:	e022      	b.n	80020ca <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208a:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe ffee 	bl	8001074 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800209a:	e00f      	b.n	80020bc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209c:	f7fe ffea 	bl	8001074 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020aa:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0e3      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020bc:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80020be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e8      	bne.n	800209c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80d7 	beq.w	8002282 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	f000 8091 	beq.w	8002204 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d166      	bne.n	80021b8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80020f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe ffbd 	bl	8001074 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe ffb9 	bl	8001074 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d907      	bls.n	800211c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210c:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b3      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ea      	bne.n	80020fe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x9a4>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002138:	3a01      	subs	r2, #1
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002142:	0212      	lsls	r2, r2, #8
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0552      	lsls	r2, r2, #21
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0652      	lsls	r2, r2, #25
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002162:	06d2      	lsls	r2, r2, #27
 8002164:	430a      	orrs	r2, r1
 8002166:	4949      	ldr	r1, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a46      	ldr	r2, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ff76 	bl	8001074 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	e00e      	b.n	80021aa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ff72 	bl	8001074 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d907      	bls.n	80021aa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e06c      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0ea      	beq.n	800218c <HAL_RCC_OscConfig+0x8a0>
 80021b6:	e064      	b.n	8002282 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a33      	ldr	r2, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff56 	bl	8001074 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ca:	e00e      	b.n	80021ea <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ff52 	bl	8001074 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d907      	bls.n	80021ea <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e04c      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ea      	bne.n	80021cc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	4924      	ldr	r1, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_RCC_OscConfig+0x9a8>)
 80021fe:	4013      	ands	r3, r2
 8002200:	60cb      	str	r3, [r1, #12]
 8002202:	e03e      	b.n	8002282 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e039      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_OscConfig+0x9a0>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	429a      	cmp	r2, r3
 8002222:	d12c      	bne.n	800227e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	3b01      	subs	r3, #1
 8002230:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d123      	bne.n	800227e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11b      	bne.n	800227e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d113      	bne.n	800227e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	019f800c 	.word	0x019f800c
 8002294:	feeefffc 	.word	0xfeeefffc

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e11c      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b90      	ldr	r3, [pc, #576]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b8d      	ldr	r3, [pc, #564]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 020f 	bic.w	r2, r3, #15
 80022c6:	498b      	ldr	r1, [pc, #556]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e104      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d908      	bls.n	800230e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	497b      	ldr	r1, [pc, #492]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8085 	beq.w	8002426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d11f      	bne.n	8002364 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0da      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002334:	f000 fa26 	bl	8002784 <RCC_GetSysClockFreqFromPLLSource>
 8002338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <HAL_RCC_ClockConfig+0x264>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d947      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d141      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800234e:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002356:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e036      	b.n	80023d2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236c:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b6      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002384:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0aa      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0a2      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023a4:	f000 f8b0 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4a53      	ldr	r2, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x264>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d90f      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023b2:	4b51      	ldr	r3, [pc, #324]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023be:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4946      	ldr	r1, [pc, #280]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7fe fe46 	bl	8001074 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e013      	b.n	8002414 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fe42 	bl	8001074 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d90a      	bls.n	8002414 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e06a      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 020c 	and.w	r2, r3, #12
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	429a      	cmp	r2, r3
 8002424:	d1e2      	bne.n	80023ec <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d105      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002436:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	429a      	cmp	r2, r3
 8002452:	d208      	bcs.n	8002466 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4925      	ldr	r1, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d210      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 020f 	bic.w	r2, r3, #15
 800247c:	491d      	ldr	r1, [pc, #116]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_ClockConfig+0x25c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e029      	b.n	80024ea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4912      	ldr	r1, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024d4:	f000 f8b6 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x268>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fd76 	bl	8000fd4 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	04c4b400 	.word	0x04c4b400
 8002500:	20000000 	.word	0x20000000
 8002504:	2000002c 	.word	0x2000002c

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002520:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d121      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d11e      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e005      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002564:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_RCC_GetSysClockFreq+0x130>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d102      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_RCC_GetSysClockFreq+0x134>)
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e004      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d101      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCC_GetSysClockFreq+0x138>)
 800258e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d146      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d003      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0xb4>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d00d      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0xce>
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_RCC_GetSysClockFreq+0x134>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0a12      	lsrs	r2, r2, #8
 80025ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
        break;
 80025d4:	e019      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d6:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_RCC_GetSysClockFreq+0x138>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0a12      	lsrs	r2, r2, #8
 80025e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
        break;
 80025ee:	e00c      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 80025fa:	68d2      	ldr	r2, [r2, #12]
 80025fc:	0a12      	lsrs	r2, r2, #8
 80025fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
        break;
 8002608:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_GetSysClockFreq+0x12c>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	0e5b      	lsrs	r3, r3, #25
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	3301      	adds	r3, #1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002624:	69bb      	ldr	r3, [r7, #24]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	08003408 	.word	0x08003408
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002648:	f7ff ff5e 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetHCLKFreq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	080033f0 	.word	0x080033f0

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002670:	f7ff ffe8 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08003400 	.word	0x08003400

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002698:	f7ff ffd4 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08003400 	.word	0x08003400

080026bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026d4:	f7ff f86c 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80026d8:	6138      	str	r0, [r7, #16]
 80026da:	e014      	b.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026f4:	f7ff f85c 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 80026f8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002712:	d10b      	bne.n	800272c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d919      	bls.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2ba0      	cmp	r3, #160	; 0xa0
 800271e:	d902      	bls.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002720:	2302      	movs	r3, #2
 8002722:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002724:	e013      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800272a:	e010      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d902      	bls.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002732:	2303      	movs	r3, #3
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e00a      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d102      	bne.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800273e:	2302      	movs	r3, #2
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e004      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b70      	cmp	r3, #112	; 0x70
 8002748:	d101      	bne.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 020f 	bic.w	r2, r3, #15
 8002756:	490a      	ldr	r1, [pc, #40]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40022000 	.word	0x40022000

08002784 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d015      	beq.n	80027d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d839      	bhi.n	8002822 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d01c      	beq.n	80027ee <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d133      	bne.n	8002822 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	4a23      	ldr	r2, [pc, #140]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	0a12      	lsrs	r2, r2, #8
 80027c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e029      	b.n	8002828 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027de:	68d2      	ldr	r2, [r2, #12]
 80027e0:	0a12      	lsrs	r2, r2, #8
 80027e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	e01c      	b.n	8002828 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e005      	b.n	8002816 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	613b      	str	r3, [r7, #16]
        break;
 8002820:	e002      	b.n	8002828 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0e5b      	lsrs	r3, r3, #25
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002842:	683b      	ldr	r3, [r7, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	00f42400 	.word	0x00f42400
 8002858:	007a1200 	.word	0x007a1200
 800285c:	08003408 	.word	0x08003408

08002860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e042      	b.n	80028f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	2b00      	cmp	r3, #0
 800287a:	d106      	bne.n	800288a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f83b 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2224      	movs	r2, #36	; 0x24
 800288e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fb32 	bl	8002f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f82f 	bl	8002914 <UART_SetConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e01b      	b.n	80028f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fbb1 	bl	8003058 <UART_CheckIdleState>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b08c      	sub	sp, #48	; 0x30
 800291a:	af00      	add	r7, sp, #0
 800291c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4313      	orrs	r3, r2
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4baa      	ldr	r3, [pc, #680]	; (8002bec <UART_SetConfig+0x2d8>)
 8002944:	4013      	ands	r3, r2
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800294c:	430b      	orrs	r3, r1
 800294e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a9f      	ldr	r2, [pc, #636]	; (8002bf0 <UART_SetConfig+0x2dc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297c:	4313      	orrs	r3, r2
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800298a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002994:	430b      	orrs	r3, r1
 8002996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	f023 010f 	bic.w	r1, r3, #15
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <UART_SetConfig+0x2e0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d125      	bne.n	8002a04 <UART_SetConfig+0xf0>
 80029b8:	4b8f      	ldr	r3, [pc, #572]	; (8002bf8 <UART_SetConfig+0x2e4>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d81a      	bhi.n	80029fc <UART_SetConfig+0xe8>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <UART_SetConfig+0xb8>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ed 	.word	0x080029ed
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029e2:	e116      	b.n	8002c12 <UART_SetConfig+0x2fe>
 80029e4:	2302      	movs	r3, #2
 80029e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ea:	e112      	b.n	8002c12 <UART_SetConfig+0x2fe>
 80029ec:	2304      	movs	r3, #4
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029f2:	e10e      	b.n	8002c12 <UART_SetConfig+0x2fe>
 80029f4:	2308      	movs	r3, #8
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029fa:	e10a      	b.n	8002c12 <UART_SetConfig+0x2fe>
 80029fc:	2310      	movs	r3, #16
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a02:	e106      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <UART_SetConfig+0x2e8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d138      	bne.n	8002a80 <UART_SetConfig+0x16c>
 8002a0e:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <UART_SetConfig+0x2e4>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d82d      	bhi.n	8002a78 <UART_SetConfig+0x164>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <UART_SetConfig+0x110>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a79 	.word	0x08002a79
 8002a2c:	08002a79 	.word	0x08002a79
 8002a30:	08002a79 	.word	0x08002a79
 8002a34:	08002a69 	.word	0x08002a69
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a79 	.word	0x08002a79
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a61 	.word	0x08002a61
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a79 	.word	0x08002a79
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a71 	.word	0x08002a71
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a5e:	e0d8      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a66:	e0d4      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6e:	e0d0      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a70:	2308      	movs	r3, #8
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a76:	e0cc      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a7e:	e0c8      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5e      	ldr	r2, [pc, #376]	; (8002c00 <UART_SetConfig+0x2ec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d125      	bne.n	8002ad6 <UART_SetConfig+0x1c2>
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <UART_SetConfig+0x2e4>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	d016      	beq.n	8002ac6 <UART_SetConfig+0x1b2>
 8002a98:	2b30      	cmp	r3, #48	; 0x30
 8002a9a:	d818      	bhi.n	8002ace <UART_SetConfig+0x1ba>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d00a      	beq.n	8002ab6 <UART_SetConfig+0x1a2>
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d814      	bhi.n	8002ace <UART_SetConfig+0x1ba>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <UART_SetConfig+0x19a>
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d008      	beq.n	8002abe <UART_SetConfig+0x1aa>
 8002aac:	e00f      	b.n	8002ace <UART_SetConfig+0x1ba>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ab4:	e0ad      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002abc:	e0a9      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ac4:	e0a5      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002acc:	e0a1      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ad4:	e09d      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <UART_SetConfig+0x2f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d125      	bne.n	8002b2c <UART_SetConfig+0x218>
 8002ae0:	4b45      	ldr	r3, [pc, #276]	; (8002bf8 <UART_SetConfig+0x2e4>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002aea:	2bc0      	cmp	r3, #192	; 0xc0
 8002aec:	d016      	beq.n	8002b1c <UART_SetConfig+0x208>
 8002aee:	2bc0      	cmp	r3, #192	; 0xc0
 8002af0:	d818      	bhi.n	8002b24 <UART_SetConfig+0x210>
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d00a      	beq.n	8002b0c <UART_SetConfig+0x1f8>
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d814      	bhi.n	8002b24 <UART_SetConfig+0x210>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <UART_SetConfig+0x1f0>
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d008      	beq.n	8002b14 <UART_SetConfig+0x200>
 8002b02:	e00f      	b.n	8002b24 <UART_SetConfig+0x210>
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0a:	e082      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b12:	e07e      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b14:	2304      	movs	r3, #4
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b1a:	e07a      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b22:	e076      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b24:	2310      	movs	r3, #16
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b2a:	e072      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a35      	ldr	r2, [pc, #212]	; (8002c08 <UART_SetConfig+0x2f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12a      	bne.n	8002b8c <UART_SetConfig+0x278>
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <UART_SetConfig+0x2e4>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b44:	d01a      	beq.n	8002b7c <UART_SetConfig+0x268>
 8002b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4a:	d81b      	bhi.n	8002b84 <UART_SetConfig+0x270>
 8002b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b50:	d00c      	beq.n	8002b6c <UART_SetConfig+0x258>
 8002b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b56:	d815      	bhi.n	8002b84 <UART_SetConfig+0x270>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <UART_SetConfig+0x250>
 8002b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b60:	d008      	beq.n	8002b74 <UART_SetConfig+0x260>
 8002b62:	e00f      	b.n	8002b84 <UART_SetConfig+0x270>
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b6a:	e052      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b72:	e04e      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b74:	2304      	movs	r3, #4
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7a:	e04a      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b82:	e046      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b84:	2310      	movs	r3, #16
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8a:	e042      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <UART_SetConfig+0x2dc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d13a      	bne.n	8002c0c <UART_SetConfig+0x2f8>
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <UART_SetConfig+0x2e4>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ba4:	d01a      	beq.n	8002bdc <UART_SetConfig+0x2c8>
 8002ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002baa:	d81b      	bhi.n	8002be4 <UART_SetConfig+0x2d0>
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d00c      	beq.n	8002bcc <UART_SetConfig+0x2b8>
 8002bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb6:	d815      	bhi.n	8002be4 <UART_SetConfig+0x2d0>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <UART_SetConfig+0x2b0>
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d008      	beq.n	8002bd4 <UART_SetConfig+0x2c0>
 8002bc2:	e00f      	b.n	8002be4 <UART_SetConfig+0x2d0>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bca:	e022      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd2:	e01e      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bda:	e01a      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002bdc:	2308      	movs	r3, #8
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be2:	e016      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002be4:	2310      	movs	r3, #16
 8002be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bea:	e012      	b.n	8002c12 <UART_SetConfig+0x2fe>
 8002bec:	cfff69f3 	.word	0xcfff69f3
 8002bf0:	40008000 	.word	0x40008000
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4ab0      	ldr	r2, [pc, #704]	; (8002ed8 <UART_SetConfig+0x5c4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	f040 809b 	bne.w	8002d54 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d827      	bhi.n	8002c76 <UART_SetConfig+0x362>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x318>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c77 	.word	0x08002c77
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff fd0c 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c56:	e014      	b.n	8002c82 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fd1c 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c5e:	e010      	b.n	8002c82 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b9e      	ldr	r3, [pc, #632]	; (8002edc <UART_SetConfig+0x5c8>)
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c64:	e00d      	b.n	8002c82 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7ff fc4f 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c6c:	e009      	b.n	8002c82 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c74:	e005      	b.n	8002c82 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8130 	beq.w	8002eea <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	4a94      	ldr	r2, [pc, #592]	; (8002ee0 <UART_SetConfig+0x5cc>)
 8002c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d305      	bcc.n	8002cba <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d903      	bls.n	8002cc2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002cc0:	e113      	b.n	8002eea <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	60fa      	str	r2, [r7, #12]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	4a84      	ldr	r2, [pc, #528]	; (8002ee0 <UART_SetConfig+0x5cc>)
 8002cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ce4:	f7fd faa6 	bl	8000234 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	020b      	lsls	r3, r1, #8
 8002cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002cfe:	0202      	lsls	r2, r0, #8
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	6849      	ldr	r1, [r1, #4]
 8002d04:	0849      	lsrs	r1, r1, #1
 8002d06:	2000      	movs	r0, #0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	eb12 0804 	adds.w	r8, r2, r4
 8002d10:	eb43 0905 	adc.w	r9, r3, r5
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	469a      	mov	sl, r3
 8002d1c:	4693      	mov	fp, r2
 8002d1e:	4652      	mov	r2, sl
 8002d20:	465b      	mov	r3, fp
 8002d22:	4640      	mov	r0, r8
 8002d24:	4649      	mov	r1, r9
 8002d26:	f7fd fa85 	bl	8000234 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d38:	d308      	bcc.n	8002d4c <UART_SetConfig+0x438>
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d40:	d204      	bcs.n	8002d4c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	e0ce      	b.n	8002eea <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d52:	e0ca      	b.n	8002eea <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5c:	d166      	bne.n	8002e2c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8002d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d827      	bhi.n	8002db6 <UART_SetConfig+0x4a2>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x458>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002db7 	.word	0x08002db7
 8002d7c:	08002da7 	.word	0x08002da7
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002daf 	.word	0x08002daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7ff fc6c 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d96:	e014      	b.n	8002dc2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff fc7c 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d9e:	e010      	b.n	8002dc2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <UART_SetConfig+0x5c8>)
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002da4:	e00d      	b.n	8002dc2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7ff fbaf 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002daa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dac:	e009      	b.n	8002dc2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002db4:	e005      	b.n	8002dc2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8090 	beq.w	8002eea <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	4a44      	ldr	r2, [pc, #272]	; (8002ee0 <UART_SetConfig+0x5cc>)
 8002dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ddc:	005a      	lsls	r2, r3, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	441a      	add	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	d916      	bls.n	8002e24 <UART_SetConfig+0x510>
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d212      	bcs.n	8002e24 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f023 030f 	bic.w	r3, r3, #15
 8002e06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	8bfb      	ldrh	r3, [r7, #30]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	8bfa      	ldrh	r2, [r7, #30]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e062      	b.n	8002eea <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e2a:	e05e      	b.n	8002eea <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d828      	bhi.n	8002e86 <UART_SetConfig+0x572>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <UART_SetConfig+0x528>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e71 	.word	0x08002e71
 8002e48:	08002e87 	.word	0x08002e87
 8002e4c:	08002e77 	.word	0x08002e77
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002e87 	.word	0x08002e87
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e7f 	.word	0x08002e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e60:	f7ff fc04 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e66:	e014      	b.n	8002e92 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7ff fc14 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8002e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e6e:	e010      	b.n	8002e92 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <UART_SetConfig+0x5c8>)
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e74:	e00d      	b.n	8002e92 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff fb47 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e7c:	e009      	b.n	8002e92 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e84:	e005      	b.n	8002e92 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e90:	bf00      	nop
    }

    if (pclk != 0U)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d028      	beq.n	8002eea <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <UART_SetConfig+0x5cc>)
 8002e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	441a      	add	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	d910      	bls.n	8002ee4 <UART_SetConfig+0x5d0>
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d20c      	bcs.n	8002ee4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e009      	b.n	8002eea <UART_SetConfig+0x5d6>
 8002ed6:	bf00      	nop
 8002ed8:	40008000 	.word	0x40008000
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	08003448 	.word	0x08003448
      }
      else
      {
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002f06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3730      	adds	r7, #48	; 0x30
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01a      	beq.n	800302a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003012:	d10a      	bne.n	800302a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b098      	sub	sp, #96	; 0x60
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003068:	f7fe f804 	bl	8001074 <HAL_GetTick>
 800306c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b08      	cmp	r3, #8
 800307a:	d12f      	bne.n	80030dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f88e 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d022      	beq.n	80030dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e6      	bne.n	8003096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e063      	b.n	80031a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d149      	bne.n	800317e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f857 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03c      	beq.n	800317e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	623b      	str	r3, [r7, #32]
   return(result);
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
 8003124:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e6      	bne.n	8003104 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3308      	adds	r3, #8
 800313c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	60fb      	str	r3, [r7, #12]
   return(result);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3308      	adds	r3, #8
 8003154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003156:	61fa      	str	r2, [r7, #28]
 8003158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	617b      	str	r3, [r7, #20]
   return(result);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e012      	b.n	80031a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3758      	adds	r7, #88	; 0x58
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	e04f      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c4:	d04b      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fd ff55 	bl	8001074 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e04e      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d037      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d034      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d031      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b08      	cmp	r3, #8
 8003206:	d110      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2208      	movs	r2, #8
 800320e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f838 	bl	8003286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2208      	movs	r2, #8
 800321a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e029      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003238:	d111      	bne.n	800325e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f81e 	bl	8003286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0a0      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003286:	b480      	push	{r7}
 8003288:	b095      	sub	sp, #84	; 0x54
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	643b      	str	r3, [r7, #64]	; 0x40
 80032ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e6      	bne.n	800328e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d118      	bne.n	8003332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	60bb      	str	r3, [r7, #8]
   return(result);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f023 0310 	bic.w	r3, r3, #16
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	613b      	str	r3, [r7, #16]
   return(result);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e6      	bne.n	8003300 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003346:	bf00      	nop
 8003348:	3754      	adds	r7, #84	; 0x54
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <memset>:
 8003352:	4402      	add	r2, r0
 8003354:	4603      	mov	r3, r0
 8003356:	4293      	cmp	r3, r2
 8003358:	d100      	bne.n	800335c <memset+0xa>
 800335a:	4770      	bx	lr
 800335c:	f803 1b01 	strb.w	r1, [r3], #1
 8003360:	e7f9      	b.n	8003356 <memset+0x4>
	...

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4d0d      	ldr	r5, [pc, #52]	; (800339c <__libc_init_array+0x38>)
 8003368:	2600      	movs	r6, #0
 800336a:	4c0d      	ldr	r4, [pc, #52]	; (80033a0 <__libc_init_array+0x3c>)
 800336c:	1b64      	subs	r4, r4, r5
 800336e:	10a4      	asrs	r4, r4, #2
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	4d0b      	ldr	r5, [pc, #44]	; (80033a4 <__libc_init_array+0x40>)
 8003376:	2600      	movs	r6, #0
 8003378:	4c0b      	ldr	r4, [pc, #44]	; (80033a8 <__libc_init_array+0x44>)
 800337a:	f000 f817 	bl	80033ac <_init>
 800337e:	1b64      	subs	r4, r4, r5
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	3601      	adds	r6, #1
 800338e:	4798      	blx	r3
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	3601      	adds	r6, #1
 8003398:	4798      	blx	r3
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003468 	.word	0x08003468
 80033a0:	08003468 	.word	0x08003468
 80033a4:	08003468 	.word	0x08003468
 80033a8:	0800346c 	.word	0x0800346c

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
