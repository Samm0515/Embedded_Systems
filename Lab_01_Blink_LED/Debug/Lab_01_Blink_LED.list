
Lab_01_Blink_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002488  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026cc  080026cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026cc  080026cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026cc  080026cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080026e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080026e0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b262  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1b  00000000  00000000  0002b2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000995  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002736c  00000000  00000000  0002e415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9f0  00000000  00000000  00055781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe8f8  00000000  00000000  00062171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033d0  00000000  00000000  00160a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00163e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08002664 	.word	0x08002664

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08002664 	.word	0x08002664

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
int main(void)
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 fb1b 	bl	800087a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f812 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f8c2 	bl	80003d0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800024c:	f000 f85f 	bl	800030e <MX_ICACHE_Init>
  MX_TIM2_Init();
 8000250:	f000 f870 	bl	8000334 <MX_TIM2_Init>

  while (1)
  {

	  // Turn the LED on
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <main+0x34>)
 800025a:	f000 fe39 	bl	8000ed0 <HAL_GPIO_WritePin>

	  // Delay for 1s
	  HAL_Delay(1000);
 800025e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000262:	f000 fb81 	bl	8000968 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000266:	e7f5      	b.n	8000254 <main+0x20>
 8000268:	42020800 	.word	0x42020800

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b098      	sub	sp, #96	; 0x60
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2248      	movs	r2, #72	; 0x48
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 f9c6 	bl	800260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800028e:	2000      	movs	r0, #0
 8000290:	f000 feb0 	bl	8000ff4 <HAL_PWREx_ControlVoltageScaling>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800029a:	f000 f98b 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800029e:	2310      	movs	r3, #16
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002aa:	2360      	movs	r3, #96	; 0x60
 80002ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002b2:	2301      	movs	r3, #1
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002b6:	2301      	movs	r3, #1
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80002ba:	2337      	movs	r3, #55	; 0x37
 80002bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002be:	2307      	movs	r3, #7
 80002c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c6:	2302      	movs	r3, #2
 80002c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 ff20 	bl	8001114 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002da:	f000 f96b 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2303      	movs	r3, #3
 80002e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2105      	movs	r1, #5
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fbe2 	bl	8001ac0 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000302:	f000 f957 	bl	80005b4 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3760      	adds	r7, #96	; 0x60
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fe30 	bl	8000f78 <HAL_ICACHE_ConfigAssociativityMode>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800031e:	f000 f949 	bl	80005b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000322:	f000 fe49 	bl	8000fb8 <HAL_ICACHE_Enable>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800032c:	f000 f942 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000352:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_TIM2_Init+0x98>)
 8000354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000358:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10999;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_TIM2_Init+0x98>)
 800035c:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8000360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_TIM2_Init+0x98>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_TIM2_Init+0x98>)
 800036a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800036e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_TIM2_Init+0x98>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_TIM2_Init+0x98>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800037c:	4813      	ldr	r0, [pc, #76]	; (80003cc <MX_TIM2_Init+0x98>)
 800037e:	f001 fe5b 	bl	8002038 <HAL_TIM_Base_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000388:	f000 f914 	bl	80005b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_TIM2_Init+0x98>)
 800039a:	f001 fea4 	bl	80020e6 <HAL_TIM_ConfigClockSource>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003a4:	f000 f906 	bl	80005b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_TIM2_Init+0x98>)
 80003b6:	f002 f8a1 	bl	80024fc <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003c0:	f000 f8f8 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000028 	.word	0x20000028

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	; 0x28
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e6:	4b6e      	ldr	r3, [pc, #440]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a6d      	ldr	r2, [pc, #436]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b6b      	ldr	r3, [pc, #428]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b68      	ldr	r3, [pc, #416]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4a67      	ldr	r2, [pc, #412]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4b65      	ldr	r3, [pc, #404]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000416:	4b62      	ldr	r3, [pc, #392]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a61      	ldr	r2, [pc, #388]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 800041c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b5f      	ldr	r3, [pc, #380]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800042e:	f000 fe3d 	bl	80010ac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b5b      	ldr	r3, [pc, #364]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a5a      	ldr	r2, [pc, #360]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b58      	ldr	r3, [pc, #352]	; (80005a0 <MX_GPIO_Init+0x1d0>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	4855      	ldr	r0, [pc, #340]	; (80005a4 <MX_GPIO_Init+0x1d4>)
 8000450:	f000 fd3e 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045a:	4853      	ldr	r0, [pc, #332]	; (80005a8 <MX_GPIO_Init+0x1d8>)
 800045c:	f000 fd38 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	21a0      	movs	r1, #160	; 0xa0
 8000464:	4851      	ldr	r0, [pc, #324]	; (80005ac <MX_GPIO_Init+0x1dc>)
 8000466:	f000 fd33 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000470:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000476:	2302      	movs	r3, #2
 8000478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	4848      	ldr	r0, [pc, #288]	; (80005a4 <MX_GPIO_Init+0x1d4>)
 8000482:	f000 fba5 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000486:	2304      	movs	r3, #4
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048a:	2303      	movs	r3, #3
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	4619      	mov	r1, r3
 8000498:	4842      	ldr	r0, [pc, #264]	; (80005a4 <MX_GPIO_Init+0x1d4>)
 800049a:	f000 fb99 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800049e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	4619      	mov	r1, r3
 80004b4:	483d      	ldr	r0, [pc, #244]	; (80005ac <MX_GPIO_Init+0x1dc>)
 80004b6:	f000 fb8b 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c0:	2303      	movs	r3, #3
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4619      	mov	r1, r3
 80004ce:	4837      	ldr	r0, [pc, #220]	; (80005ac <MX_GPIO_Init+0x1dc>)
 80004d0:	f000 fb7e 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80004d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80004e6:	2308      	movs	r3, #8
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	482f      	ldr	r0, [pc, #188]	; (80005b0 <MX_GPIO_Init+0x1e0>)
 80004f2:	f000 fb6d 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	4825      	ldr	r0, [pc, #148]	; (80005a4 <MX_GPIO_Init+0x1d4>)
 800050e:	f000 fb5f 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4619      	mov	r1, r3
 800052a:	481f      	ldr	r0, [pc, #124]	; (80005a8 <MX_GPIO_Init+0x1d8>)
 800052c:	f000 fb50 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000542:	230a      	movs	r3, #10
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <MX_GPIO_Init+0x1d8>)
 800054e:	f000 fb3f 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000558:	2303      	movs	r3, #3
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <MX_GPIO_Init+0x1d8>)
 8000568:	f000 fb32 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <MX_GPIO_Init+0x1dc>)
 8000584:	f000 fb24 	bl	8000bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2018      	movs	r0, #24
 800058e:	f000 faea 	bl	8000b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000592:	2018      	movs	r0, #24
 8000594:	f000 fb01 	bl	8000b9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	42020800 	.word	0x42020800
 80005a8:	42020000 	.word	0x42020000
 80005ac:	42020400 	.word	0x42020400
 80005b0:	42021800 	.word	0x42021800

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x44>)
 80005c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6613      	str	r3, [r2, #96]	; 0x60
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x44>)
 80005d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_MspInit+0x44>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_MspInit+0x44>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d10b      	bne.n	8000632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f94a 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800069c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a0:	f000 fc2e 	bl	8000f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80006d2:	4b4f      	ldr	r3, [pc, #316]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d107      	bne.n	80006ee <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80006de:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80006e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e005      	b.n	80006fa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80006ee:	4b48      	ldr	r3, [pc, #288]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80006fa:	4a46      	ldr	r2, [pc, #280]	; (8000814 <SystemCoreClockUpdate+0x148>)
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <SystemCoreClockUpdate+0x144>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 030c 	and.w	r3, r3, #12
 800070c:	2b0c      	cmp	r3, #12
 800070e:	d866      	bhi.n	80007de <SystemCoreClockUpdate+0x112>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <SystemCoreClockUpdate+0x4c>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	0800074d 	.word	0x0800074d
 800071c:	080007df 	.word	0x080007df
 8000720:	080007df 	.word	0x080007df
 8000724:	080007df 	.word	0x080007df
 8000728:	08000755 	.word	0x08000755
 800072c:	080007df 	.word	0x080007df
 8000730:	080007df 	.word	0x080007df
 8000734:	080007df 	.word	0x080007df
 8000738:	0800075d 	.word	0x0800075d
 800073c:	080007df 	.word	0x080007df
 8000740:	080007df 	.word	0x080007df
 8000744:	080007df 	.word	0x080007df
 8000748:	08000765 	.word	0x08000765
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800074c:	4a32      	ldr	r2, [pc, #200]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	6013      	str	r3, [r2, #0]
      break;
 8000752:	e048      	b.n	80007e6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 8000756:	4a31      	ldr	r2, [pc, #196]	; (800081c <SystemCoreClockUpdate+0x150>)
 8000758:	601a      	str	r2, [r3, #0]
      break;
 800075a:	e044      	b.n	80007e6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <SystemCoreClockUpdate+0x154>)
 8000760:	601a      	str	r2, [r3, #0]
      break;
 8000762:	e040      	b.n	80007e6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <SystemCoreClockUpdate+0x144>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f003 0303 	and.w	r3, r3, #3
 800076c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemCoreClockUpdate+0x144>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	3301      	adds	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d003      	beq.n	800078a <SystemCoreClockUpdate+0xbe>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d006      	beq.n	8000796 <SystemCoreClockUpdate+0xca>
 8000788:	e00b      	b.n	80007a2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <SystemCoreClockUpdate+0x150>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	613b      	str	r3, [r7, #16]
          break;
 8000794:	e00b      	b.n	80007ae <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <SystemCoreClockUpdate+0x154>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	613b      	str	r3, [r7, #16]
          break;
 80007a0:	e005      	b.n	80007ae <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	613b      	str	r3, [r7, #16]
          break;
 80007ac:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	fb02 f303 	mul.w	r3, r2, r3
 80007be:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0e5b      	lsrs	r3, r3, #25
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	3301      	adds	r3, #1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 80007da:	6013      	str	r3, [r2, #0]
      break;
 80007dc:	e003      	b.n	80007e6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	6013      	str	r3, [r2, #0]
      break;
 80007e4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <SystemCoreClockUpdate+0x144>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	091b      	lsrs	r3, r3, #4
 80007ec:	f003 030f 	and.w	r3, r3, #15
 80007f0:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <SystemCoreClockUpdate+0x158>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemCoreClockUpdate+0x14c>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	371c      	adds	r7, #28
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000
 8000814:	0800268c 	.word	0x0800268c
 8000818:	20000000 	.word	0x20000000
 800081c:	00f42400 	.word	0x00f42400
 8000820:	007a1200 	.word	0x007a1200
 8000824:	0800267c 	.word	0x0800267c

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800082c:	f7ff ff3c 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000830:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000832:	e003      	b.n	800083c <LoopCopyDataInit>

08000834 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000836:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000838:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800083a:	3104      	adds	r1, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800083c:	480a      	ldr	r0, [pc, #40]	; (8000868 <LoopForever+0xa>)
	ldr	r3, =_edata
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000840:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000842:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000844:	d3f6      	bcc.n	8000834 <CopyDataInit>
	ldr	r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000848:	e002      	b.n	8000850 <LoopFillZerobss>

0800084a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800084a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800084c:	f842 3b04 	str.w	r3, [r2], #4

08000850 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <LoopForever+0x16>)
	cmp	r2, r3
 8000852:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000854:	d3f9      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000856:	f001 fee1 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fceb 	bl	8000234 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000860:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000864:	080026d4 	.word	0x080026d4
	ldr	r0, =_sdata
 8000868:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800086c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000874:	20000078 	.word	0x20000078

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>

0800087a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f963 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800088a:	f7ff ff1f 	bl	80006cc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f80e 	bl	80008b0 <HAL_InitTick>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	e001      	b.n	80008a4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a0:	f7ff fe8e 	bl	80005c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_InitTick+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d023      	beq.n	800090c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_InitTick+0x70>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_InitTick+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f96b 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10f      	bne.n	8000906 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d809      	bhi.n	8000900 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f4:	f000 f937 	bl	8000b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_InitTick+0x74>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e007      	b.n	8000910 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e004      	b.n	8000910 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	e001      	b.n	8000910 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	20000000 	.word	0x20000000
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000074 	.word	0x20000074

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000074 	.word	0x20000074

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0152      	lsls	r2, r2, #5
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0152      	lsls	r2, r2, #5
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	bf28      	it	cs
 8000ac2:	2303      	movcs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3303      	adds	r3, #3
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b04      	subs	r3, #4
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	2107      	movs	r1, #7
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff40 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa4 	bl	8000b0c <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bde:	e158      	b.n	8000e92 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 814a 	beq.w	8000e8c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d005      	beq.n	8000c10 <HAL_GPIO_Init+0x40>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d130      	bne.n	8000c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c46:	2201      	movs	r2, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	f003 0201 	and.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d017      	beq.n	8000cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d123      	bne.n	8000d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0203 	and.w	r2, r3, #3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 80a4 	beq.w	8000e8c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000d44:	4a5a      	ldr	r2, [pc, #360]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <HAL_GPIO_Init+0x2e4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d025      	beq.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x2e8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d01f      	beq.n	8000db8 <HAL_GPIO_Init+0x1e8>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <HAL_GPIO_Init+0x2ec>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d019      	beq.n	8000db4 <HAL_GPIO_Init+0x1e4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x2f0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d013      	beq.n	8000db0 <HAL_GPIO_Init+0x1e0>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x2f4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d00d      	beq.n	8000dac <HAL_GPIO_Init+0x1dc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d007      	beq.n	8000da8 <HAL_GPIO_Init+0x1d8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d101      	bne.n	8000da4 <HAL_GPIO_Init+0x1d4>
 8000da0:	2306      	movs	r3, #6
 8000da2:	e00c      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000da4:	2307      	movs	r3, #7
 8000da6:	e00a      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000da8:	2305      	movs	r3, #5
 8000daa:	e008      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000dce:	4938      	ldr	r1, [pc, #224]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e2a:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_GPIO_Init+0x2e0>)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f47f ae9f 	bne.w	8000be0 <HAL_GPIO_Init+0x10>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	4002f400 	.word	0x4002f400
 8000eb4:	42020000 	.word	0x42020000
 8000eb8:	42020400 	.word	0x42020400
 8000ebc:	42020800 	.word	0x42020800
 8000ec0:	42020c00 	.word	0x42020c00
 8000ec4:	42021000 	.word	0x42021000
 8000ec8:	42021400 	.word	0x42021400
 8000ecc:	42021800 	.word	0x42021800

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f814 	bl	8000f4c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f812 	bl	8000f62 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	4002f400 	.word	0x4002f400

08000f4c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e007      	b.n	8000fa6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 0204 	bic.w	r2, r3, #4
 8000f9e:	4905      	ldr	r1, [pc, #20]	; (8000fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40030400 	.word	0x40030400

08000fb8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_ICACHE_Enable+0x1c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_ICACHE_Enable+0x1c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40030400 	.word	0x40030400

08000fd8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001004:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001006:	f000 f861 	bl	80010cc <HAL_PWREx_SMPS_GetEffectiveMode>
 800100a:	4603      	mov	r3, r0
 800100c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001010:	d101      	bne.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e03e      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001022:	d101      	bne.n	8001028 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e035      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d101      	bne.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e02f      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800103c:	4917      	ldr	r1, [pc, #92]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	09db      	lsrs	r3, r3, #7
 8001052:	2232      	movs	r2, #50	; 0x32
 8001054:	fb02 f303 	mul.w	r3, r2, r3
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001064:	e002      	b.n	800106c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3b01      	subs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001078:	d102      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f2      	bne.n	8001066 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800108c:	d101      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e000      	b.n	8001094 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	0a7c5ac5 	.word	0x0a7c5ac5
 80010a8:	cccccccd 	.word	0xcccccccd

080010ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6053      	str	r3, [r2, #4]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	e00a      	b.n	8001100 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e001      	b.n	8001100 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40007000 	.word	0x40007000

08001114 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f000 bcc2 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001128:	4b99      	ldr	r3, [pc, #612]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001132:	4b97      	ldr	r3, [pc, #604]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80e9 	beq.w	800131c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_RCC_OscConfig+0x4a>
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	f040 8083 	bne.w	800125e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d17f      	bne.n	800125e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800115e:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_RCC_OscConfig+0x64>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f000 bc9a 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117c:	4b84      	ldr	r3, [pc, #528]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <HAL_RCC_OscConfig+0x7e>
 8001188:	4b81      	ldr	r3, [pc, #516]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001190:	e005      	b.n	800119e <HAL_RCC_OscConfig+0x8a>
 8001192:	4b7f      	ldr	r3, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800119e:	4293      	cmp	r3, r2
 80011a0:	d224      	bcs.n	80011ec <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fe74 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f000 bc7a 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b8:	4b75      	ldr	r3, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a74      	ldr	r2, [pc, #464]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b72      	ldr	r3, [pc, #456]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	496f      	ldr	r1, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	496a      	ldr	r1, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
 80011ea:	e026      	b.n	800123a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a67      	ldr	r2, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	4962      	ldr	r1, [pc, #392]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120a:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	495d      	ldr	r1, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10a      	bne.n	800123a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fe33 	bl	8001e94 <RCC_SetFlashLatencyFromMSIRange>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	f000 bc39 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800123a:	f000 fe17 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 800123e:	4603      	mov	r3, r0
 8001240:	4a54      	ldr	r2, [pc, #336]	; (8001394 <HAL_RCC_OscConfig+0x280>)
 8001242:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001244:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_RCC_OscConfig+0x284>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fb31 	bl	80008b0 <HAL_InitTick>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d060      	beq.n	800131a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f000 bc27 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d039      	beq.n	80012da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a49      	ldr	r2, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb6d 	bl	8000950 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001278:	e00f      	b.n	800129a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127a:	f7ff fb69 	bl	8000950 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d908      	bls.n	800129a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	f000 bc09 	b.w	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0e9      	beq.n	800127a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a39      	ldr	r2, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	4934      	ldr	r1, [pc, #208]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	492f      	ldr	r1, [pc, #188]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e020      	b.n	800131c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb33 	bl	8000950 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ec:	e00e      	b.n	800130c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ee:	f7ff fb2f 	bl	8000950 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d907      	bls.n	800130c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e3cf      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ea      	bne.n	80012ee <HAL_RCC_OscConfig+0x1da>
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800131a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d07e      	beq.n	8001426 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b08      	cmp	r3, #8
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x226>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d10e      	bne.n	8001352 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06e      	beq.n	8001424 <HAL_RCC_OscConfig+0x310>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d16a      	bne.n	8001424 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e3ac      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x256>
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e024      	b.n	80013b4 <HAL_RCC_OscConfig+0x2a0>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001372:	d113      	bne.n	800139c <HAL_RCC_OscConfig+0x288>
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800137a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a02      	ldr	r2, [pc, #8]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e012      	b.n	80013b4 <HAL_RCC_OscConfig+0x2a0>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004
 800139c:	4b8b      	ldr	r3, [pc, #556]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a8a      	ldr	r2, [pc, #552]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a87      	ldr	r2, [pc, #540]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d019      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fac8 	bl	8000950 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c2:	e00e      	b.n	80013e2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fac4 	bl	8000950 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d907      	bls.n	80013e2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e364      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e2:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ea      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2b0>
 80013ee:	e01a      	b.n	8001426 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff faae 	bl	8000950 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f6:	e00e      	b.n	8001416 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff faaa 	bl	8000950 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d907      	bls.n	8001416 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	4b71      	ldr	r3, [pc, #452]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e34a      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	4b6d      	ldr	r3, [pc, #436]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ea      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2e4>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x330>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d119      	bne.n	8001472 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d116      	bne.n	8001472 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x348>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e327      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4958      	ldr	r1, [pc, #352]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001470:	e04c      	b.n	800150c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d029      	beq.n	80014ce <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147a:	4b54      	ldr	r3, [pc, #336]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a53      	ldr	r2, [pc, #332]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fa63 	bl	8000950 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	e00e      	b.n	80014ac <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fa5f 	bl	8000950 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d907      	bls.n	80014ac <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e2ff      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0ea      	beq.n	800148e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b44      	ldr	r3, [pc, #272]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	4941      	ldr	r1, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e01e      	b.n	800150c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fa39 	bl	8000950 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa35 	bl	8000950 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e2d5      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d062      	beq.n	80015de <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d038      	beq.n	8001592 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152e:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001530:	f023 0310 	bic.w	r3, r3, #16
 8001534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001538:	e007      	b.n	800154a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff f9f9 	bl	8000950 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001560:	e00f      	b.n	8001582 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff f9f5 	bl	8000950 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b07      	cmp	r3, #7
 800156e:	d908      	bls.n	8001582 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e294      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0e8      	beq.n	8001562 <HAL_RCC_OscConfig+0x44e>
 8001590:	e025      	b.n	80015de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff f9d5 	bl	8000950 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	e012      	b.n	80015d0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff f9d1 	bl	8000950 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d90b      	bls.n	80015d0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_OscConfig+0x4b8>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e270      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4ba8      	ldr	r3, [pc, #672]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1e5      	bne.n	80015aa <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 812d 	beq.w	8001846 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f0:	4ba0      	ldr	r3, [pc, #640]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	4b9d      	ldr	r3, [pc, #628]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	4a9c      	ldr	r2, [pc, #624]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001606:	6593      	str	r3, [r2, #88]	; 0x58
 8001608:	4b9a      	ldr	r3, [pc, #616]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	4b97      	ldr	r3, [pc, #604]	; (8001878 <HAL_RCC_OscConfig+0x764>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11e      	bne.n	8001662 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001624:	4b94      	ldr	r3, [pc, #592]	; (8001878 <HAL_RCC_OscConfig+0x764>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a93      	ldr	r2, [pc, #588]	; (8001878 <HAL_RCC_OscConfig+0x764>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001630:	f7ff f98e 	bl	8000950 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	e00e      	b.n	8001656 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff f98a 	bl	8000950 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d907      	bls.n	8001656 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x764>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e22a      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x764>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0ea      	beq.n	8001638 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01f      	beq.n	80016ae <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d010      	beq.n	800169c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800167a:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	4a7c      	ldr	r2, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800169c:	4b75      	ldr	r3, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a74      	ldr	r2, [pc, #464]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ac:	e00f      	b.n	80016ce <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016ae:	4b71      	ldr	r3, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b4:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016be:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d068      	beq.n	80017a8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff f93b 	bl	8000950 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016dc:	e011      	b.n	8001702 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f937 	bl	8000950 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d908      	bls.n	8001702 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f0:	4b60      	ldr	r3, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1d4      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0e6      	beq.n	80016de <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001718:	2b00      	cmp	r3, #0
 800171a:	d022      	beq.n	8001762 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800172c:	e011      	b.n	8001752 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f90f 	bl	8000950 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d908      	bls.n	8001752 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1ac      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001752:	4b48      	ldr	r3, [pc, #288]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e6      	beq.n	800172e <HAL_RCC_OscConfig+0x61a>
 8001760:	e068      	b.n	8001834 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a42      	ldr	r2, [pc, #264]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800176a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001772:	e011      	b.n	8001798 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f8ec 	bl	8000950 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d908      	bls.n	8001798 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e189      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e6      	bne.n	8001774 <HAL_RCC_OscConfig+0x660>
 80017a6:	e045      	b.n	8001834 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff f8d2 	bl	8000950 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ae:	e011      	b.n	80017d4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff f8ce 	bl	8000950 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d908      	bls.n	80017d4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e16b      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1e6      	bne.n	80017b0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d021      	beq.n	8001834 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 80017f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001800:	e011      	b.n	8001826 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff f8a5 	bl	8000950 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d908      	bls.n	8001826 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e142      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e6      	bne.n	8001802 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04f      	beq.n	80018f2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b00      	cmp	r3, #0
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 800185c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_RCC_OscConfig+0x760>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff f871 	bl	8000950 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x788>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187c:	f7ff f868 	bl	8000950 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d908      	bls.n	800189c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188a:	4b8a      	ldr	r3, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 800188c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e107      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189c:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 800189e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0e8      	beq.n	800187c <HAL_RCC_OscConfig+0x768>
 80018aa:	e022      	b.n	80018f2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	4a80      	ldr	r2, [pc, #512]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f848 	bl	8000950 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c4:	f7ff f844 	bl	8000950 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d908      	bls.n	80018e4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80018d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0e3      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e4:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e8      	bne.n	80018c4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80d7 	beq.w	8001aaa <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fc:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b0c      	cmp	r3, #12
 8001906:	f000 8091 	beq.w	8001a2c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	2b02      	cmp	r3, #2
 8001910:	d166      	bne.n	80019e0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a67      	ldr	r2, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f817 	bl	8000950 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	e00e      	b.n	8001944 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f813 	bl	8000950 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d907      	bls.n	8001944 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0b3      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ea      	bne.n	8001926 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x9a4>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001960:	3a01      	subs	r2, #1
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196a:	0212      	lsls	r2, r2, #8
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001972:	0852      	lsrs	r2, r2, #1
 8001974:	3a01      	subs	r2, #1
 8001976:	0552      	lsls	r2, r2, #21
 8001978:	4311      	orrs	r1, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800197e:	0852      	lsrs	r2, r2, #1
 8001980:	3a01      	subs	r2, #1
 8001982:	0652      	lsls	r2, r2, #25
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800198a:	06d2      	lsls	r2, r2, #27
 800198c:	430a      	orrs	r2, r1
 800198e:	4949      	ldr	r1, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a43      	ldr	r2, [pc, #268]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7fe ffd0 	bl	8000950 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	e00e      	b.n	80019d2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe ffcc 	bl	8000950 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d907      	bls.n	80019d2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e06c      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0ea      	beq.n	80019b4 <HAL_RCC_OscConfig+0x8a0>
 80019de:	e064      	b.n	8001aaa <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 80019e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7fe ffb0 	bl	8000950 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f2:	e00e      	b.n	8001a12 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7fe ffac 	bl	8000950 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d907      	bls.n	8001a12 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04c      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ea      	bne.n	80019f4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4924      	ldr	r1, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_OscConfig+0x9a8>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	60cb      	str	r3, [r1, #12]
 8001a2a:	e03e      	b.n	8001aaa <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e039      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_OscConfig+0x9a0>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d12c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	3b01      	subs	r3, #1
 8001a58:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d123      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d113      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	019f800c 	.word	0x019f800c
 8001abc:	feeefffc 	.word	0xfeeefffc

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e11c      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b90      	ldr	r3, [pc, #576]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 020f 	bic.w	r2, r3, #15
 8001aee:	498b      	ldr	r1, [pc, #556]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e104      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d908      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	497b      	ldr	r1, [pc, #492]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8085 	beq.w	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d11f      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b74      	ldr	r3, [pc, #464]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0da      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b5c:	f000 f9fe 	bl	8001f5c <RCC_GetSysClockFreqFromPLLSource>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4a6f      	ldr	r2, [pc, #444]	; (8001d24 <HAL_RCC_ClockConfig+0x264>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d947      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d141      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b76:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b7e:	4a68      	ldr	r2, [pc, #416]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e036      	b.n	8001bfa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b6      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bac:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0aa      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0a2      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bcc:	f000 f8b0 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4a53      	ldr	r2, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d90f      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bee:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4946      	ldr	r1, [pc, #280]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fea0 	bl	8000950 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7fe fe9c 	bl	8000950 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d90a      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e06a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 020c 	and.w	r2, r3, #12
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d1e2      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b80      	cmp	r3, #128	; 0x80
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d010      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d208      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4925      	ldr	r1, [pc, #148]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d210      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 020f 	bic.w	r2, r3, #15
 8001ca4:	491d      	ldr	r1, [pc, #116]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_ClockConfig+0x25c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e029      	b.n	8001d12 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4912      	ldr	r1, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	490a      	ldr	r1, [pc, #40]	; (8001d20 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cfc:	f000 f8b6 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x268>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fdd0 	bl	80008b0 <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	04c4b400 	.word	0x04c4b400
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d11e      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d64:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001d8c:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x134>)
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e004      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d146      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d003      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0xb4>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d00d      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0xce>
 8001de2:	e019      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x134>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dee:	68d2      	ldr	r2, [r2, #12]
 8001df0:	0a12      	lsrs	r2, r2, #8
 8001df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
        break;
 8001dfc:	e019      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e08:	68d2      	ldr	r2, [r2, #12]
 8001e0a:	0a12      	lsrs	r2, r2, #8
 8001e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	617b      	str	r3, [r7, #20]
        break;
 8001e16:	e00c      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e22:	68d2      	ldr	r2, [r2, #12]
 8001e24:	0a12      	lsrs	r2, r2, #8
 8001e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
        break;
 8001e30:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0e5b      	lsrs	r3, r3, #25
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	0800268c 	.word	0x0800268c
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001e70:	f7ff ff5e 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	0800267c 	.word	0x0800267c

08001e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eac:	f7ff f894 	bl	8000fd8 <HAL_PWREx_GetVoltageRange>
 8001eb0:	6138      	str	r0, [r7, #16]
 8001eb2:	e014      	b.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec0:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ecc:	f7ff f884 	bl	8000fd8 <HAL_PWREx_GetVoltageRange>
 8001ed0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d10b      	bne.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d919      	bls.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ef6:	d902      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef8:	2302      	movs	r3, #2
 8001efa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001efc:	e013      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001efe:	2301      	movs	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f02:	e010      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d902      	bls.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e00a      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b80      	cmp	r3, #128	; 0x80
 8001f14:	d102      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f16:	2302      	movs	r3, #2
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e004      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b70      	cmp	r3, #112	; 0x70
 8001f20:	d101      	bne.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40022000 	.word	0x40022000

08001f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d015      	beq.n	8001fac <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d839      	bhi.n	8001ffa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d01c      	beq.n	8001fc6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d133      	bne.n	8001ffa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f92:	4a26      	ldr	r2, [pc, #152]	; (800202c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	0a12      	lsrs	r2, r2, #8
 8001fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e029      	b.n	8002000 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fac:	4a20      	ldr	r2, [pc, #128]	; (8002030 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fb6:	68d2      	ldr	r2, [r2, #12]
 8001fb8:	0a12      	lsrs	r2, r2, #8
 8001fba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	613b      	str	r3, [r7, #16]
      break;
 8001fc4:	e01c      	b.n	8002000 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e005      	b.n	8001fee <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	613b      	str	r3, [r7, #16]
        break;
 8001ff8:	e002      	b.n	8002000 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
      break;
 8001ffe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0e5b      	lsrs	r3, r3, #25
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800201a:	683b      	ldr	r3, [r7, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000
 800202c:	00f42400 	.word	0x00f42400
 8002030:	007a1200 	.word	0x007a1200
 8002034:	0800268c 	.word	0x0800268c

08002038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e049      	b.n	80020de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fad2 	bl	8000608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 f8fe 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_ConfigClockSource+0x1c>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0b6      	b.n	8002270 <HAL_TIM_ConfigClockSource+0x18a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002120:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002124:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800212c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213e:	d03e      	beq.n	80021be <HAL_TIM_ConfigClockSource+0xd8>
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002144:	f200 8087 	bhi.w	8002256 <HAL_TIM_ConfigClockSource+0x170>
 8002148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214c:	f000 8086 	beq.w	800225c <HAL_TIM_ConfigClockSource+0x176>
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d87f      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 8002156:	2b70      	cmp	r3, #112	; 0x70
 8002158:	d01a      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xaa>
 800215a:	2b70      	cmp	r3, #112	; 0x70
 800215c:	d87b      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 800215e:	2b60      	cmp	r3, #96	; 0x60
 8002160:	d050      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0x11e>
 8002162:	2b60      	cmp	r3, #96	; 0x60
 8002164:	d877      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 8002166:	2b50      	cmp	r3, #80	; 0x50
 8002168:	d03c      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0xfe>
 800216a:	2b50      	cmp	r3, #80	; 0x50
 800216c:	d873      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d058      	beq.n	8002224 <HAL_TIM_ConfigClockSource+0x13e>
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d86f      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 8002176:	2b30      	cmp	r3, #48	; 0x30
 8002178:	d064      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0x15e>
 800217a:	2b30      	cmp	r3, #48	; 0x30
 800217c:	d86b      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 800217e:	2b20      	cmp	r3, #32
 8002180:	d060      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0x15e>
 8002182:	2b20      	cmp	r3, #32
 8002184:	d867      	bhi.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d05c      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0x15e>
 800218a:	2b10      	cmp	r3, #16
 800218c:	d05a      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0x15e>
 800218e:	e062      	b.n	8002256 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021a0:	f000 f98c 	bl	80024bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]
      break;
 80021bc:	e04f      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ce:	f000 f975 	bl	80024bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e0:	609a      	str	r2, [r3, #8]
      break;
 80021e2:	e03c      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f0:	461a      	mov	r2, r3
 80021f2:	f000 f8e7 	bl	80023c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2150      	movs	r1, #80	; 0x50
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f940 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002202:	e02c      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002210:	461a      	mov	r2, r3
 8002212:	f000 f906 	bl	8002422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2160      	movs	r1, #96	; 0x60
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f930 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002222:	e01c      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002230:	461a      	mov	r2, r3
 8002232:	f000 f8c7 	bl	80023c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f920 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002242:	e00c      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 f917 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002254:	e003      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e000      	b.n	800225e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800225c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <TIM_Base_SetConfig+0x12c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d00f      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <TIM_Base_SetConfig+0x130>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00b      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a42      	ldr	r2, [pc, #264]	; (80023ac <TIM_Base_SetConfig+0x134>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a41      	ldr	r2, [pc, #260]	; (80023b0 <TIM_Base_SetConfig+0x138>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a40      	ldr	r2, [pc, #256]	; (80023b4 <TIM_Base_SetConfig+0x13c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d108      	bne.n	80022ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a35      	ldr	r2, [pc, #212]	; (80023a4 <TIM_Base_SetConfig+0x12c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d01b      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <TIM_Base_SetConfig+0x130>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d017      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <TIM_Base_SetConfig+0x134>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <TIM_Base_SetConfig+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00f      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2f      	ldr	r2, [pc, #188]	; (80023b4 <TIM_Base_SetConfig+0x13c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <TIM_Base_SetConfig+0x140>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <TIM_Base_SetConfig+0x144>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <TIM_Base_SetConfig+0x148>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <TIM_Base_SetConfig+0x12c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00f      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <TIM_Base_SetConfig+0x13c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00b      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <TIM_Base_SetConfig+0x140>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a16      	ldr	r2, [pc, #88]	; (80023bc <TIM_Base_SetConfig+0x144>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <TIM_Base_SetConfig+0x148>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f023 0201 	bic.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40013400 	.word	0x40013400
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800

080023c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 0201 	bic.w	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f023 030a 	bic.w	r3, r3, #10
 8002400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002422:	b480      	push	{r7}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 0210 	bic.w	r2, r3, #16
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800244c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800245e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	621a      	str	r2, [r3, #32]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f043 0307 	orr.w	r3, r3, #7
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	431a      	orrs	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002510:	2302      	movs	r3, #2
 8002512:	e068      	b.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2e      	ldr	r2, [pc, #184]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d108      	bne.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800254e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01d      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d018      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10c      	bne.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40013400 	.word	0x40013400
 80025fc:	40000400 	.word	0x40000400
 8002600:	40000800 	.word	0x40000800
 8002604:	40000c00 	.word	0x40000c00
 8002608:	40014000 	.word	0x40014000

0800260c <memset>:
 800260c:	4402      	add	r2, r0
 800260e:	4603      	mov	r3, r0
 8002610:	4293      	cmp	r3, r2
 8002612:	d100      	bne.n	8002616 <memset+0xa>
 8002614:	4770      	bx	lr
 8002616:	f803 1b01 	strb.w	r1, [r3], #1
 800261a:	e7f9      	b.n	8002610 <memset+0x4>

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4d0d      	ldr	r5, [pc, #52]	; (8002654 <__libc_init_array+0x38>)
 8002620:	2600      	movs	r6, #0
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002624:	1b64      	subs	r4, r4, r5
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4d0b      	ldr	r5, [pc, #44]	; (800265c <__libc_init_array+0x40>)
 800262e:	2600      	movs	r6, #0
 8002630:	4c0b      	ldr	r4, [pc, #44]	; (8002660 <__libc_init_array+0x44>)
 8002632:	f000 f817 	bl	8002664 <_init>
 8002636:	1b64      	subs	r4, r4, r5
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	3601      	adds	r6, #1
 8002646:	4798      	blx	r3
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	3601      	adds	r6, #1
 8002650:	4798      	blx	r3
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	080026cc 	.word	0x080026cc
 8002658:	080026cc 	.word	0x080026cc
 800265c:	080026cc 	.word	0x080026cc
 8002660:	080026d0 	.word	0x080026d0

08002664 <_init>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	bf00      	nop
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr

08002670 <_fini>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr
